@model VideoStreaming.Models.Video

@{
    ViewData["Title"] = "Video Details";
}

<div class="container mt-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
        <h2 class="mb-0 d-flex align-items-center text-dark fw-bold" style="font-size:1.6rem;">
            <i class="bi bi-film me-2 text-primary"></i> @Model.Title
        </h2>
        <a class="btn btn-outline-dark mt-2 mt-sm-0 fw-semibold" href="@Url.Action("Index","Videos")">
            <i class="bi bi-arrow-left"></i> Back to Library
        </a>
    </div>

    <!-- Status -->
    <p class="fs-5">
        <strong class="me-2">Status:</strong>
        @switch (Model.Status)
        {
            case VideoStreaming.Models.VideoStatus.Processing:
                <span class="badge bg-warning text-dark px-3 py-2">Processing</span>; break;
            case VideoStreaming.Models.VideoStatus.Ready:
                <span class="badge bg-success px-3 py-2">Ready</span>; break;
            case VideoStreaming.Models.VideoStatus.Failed:
                <span class="badge bg-danger px-3 py-2">Failed</span>; break;
            default:
                <span class="badge bg-secondary px-3 py-2">@Model.Status</span>; break;
        }
    </p>

    <!-- Video Player -->
    @if (Model.Status == VideoStreaming.Models.VideoStatus.Ready && !string.IsNullOrEmpty(Model.HlsPath))
    {
        <h4 class="mt-4 text-dark fw-semibold" style="font-size:1.3rem;">
            <i class="bi bi-play-circle text-primary"></i> Watch Video
        </h4>

        <div class="d-flex justify-content-center mt-3">
            <div class="video-wrapper shadow-sm rounded overflow-hidden" style="max-width: 900px; width:100%;">
                <div class="ratio ratio-16x9 bg-dark">
                    <video id="player" controls playsinline class="w-100 h-100 rounded"></video>
                </div>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
        <script>
            const video = document.getElementById('player');
            const src = '@Model.HlsPath';
            if (Hls.isSupported()) {
                const hls = new Hls();
                hls.loadSource(src);
                hls.attachMedia(video);
            } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                video.src = src;
            } else {
                video.insertAdjacentHTML("afterend",
                    '<div class="alert alert-warning mt-2">⚠️ Your browser does not support HLS playback directly.</div>');
            }
        </script>
    }
    else
    {
        <div class="alert alert-info mt-3 fs-6">
            ⏳ Video playback will be available once processing is complete.
        </div>
    }
</div>
